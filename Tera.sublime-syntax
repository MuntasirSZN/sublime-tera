%YAML 1.2
---
# Tera template language syntax for Sublime Text
name: Tera
file_extensions:
  - tera
scope: text.tera

contexts:
  main:
    - match: '{#-?'
      captures:
        0: punctuation.definition.comment.tera
      push:
        - meta_scope: comment.block.tera
        - match: '-?#}'
          captures:
            0: punctuation.definition.comment.tera
          pop: true
    
    - match: '({{-?)'
      captures:
        1: punctuation.section.group.begin.tera
      push:
        - meta_scope: meta.scope.tera.expression
        - match: '(-?}})'
          captures:
            1: punctuation.section.group.end.tera
          pop: true
        - include: expression
    
    - match: '({%-?)\s*(if|elif|for|filter|macro|set|set_global|include|import|extends)\s+'
      captures:
        1: punctuation.section.block.begin.tera
        2: keyword.control.tera
      push:
        - meta_scope: meta.scope.tera.tag
        - match: '(-?%})'
          captures:
            1: punctuation.section.block.end.tera
          pop: true
        - include: expression
    
    - match: '({%-?)\s*(block|endblock|filter|endfilter|endmacro)\s+'
      captures:
        1: punctuation.section.block.begin.tera
        2: keyword.control.tera
      push:
        - meta_scope: meta.scope.tera.tag
        - match: '(-?%})'
          captures:
            1: punctuation.section.block.end.tera
          pop: true
        - include: identifier
    
    - match: '({%-?)\s*(else|elif|endif|endfor|continue|break|endblock|endfilter|endmacro)\s*'
      captures:
        1: punctuation.section.block.begin.tera
        2: keyword.control.tera
      push:
        - meta_scope: meta.scope.tera.tag
        - match: '(-?%})'
          captures:
            1: punctuation.section.block.end.tera
          pop: true
    
    - match: '({%-?)\s*(raw)\s*(-?%})'
      captures:
        1: punctuation.section.block.begin.tera
        2: keyword.control.tera
        3: punctuation.section.block.end.tera
      push:
        - meta_scope: markup.raw.block.tera
        - match: '({%-?)\s*(endraw)\s*(-?%})'
          captures:
            1: punctuation.section.block.begin.tera
            2: keyword.control.tera
            3: punctuation.section.block.end.tera
          pop: true
    
    - include: scope:text.html.basic

  identifier:
    - match: '\b([a-zA-Z_][a-zA-Z0-9_]+)\b'
      scope: variable.other.tera

  test:
    - match: '\s*\b(is)\s+(not\s+)?(\w+)\b'
      captures:
        1: keyword.control.tera
        2: keyword.control.tera
        3: entity.name.function.tera

  filter:
    - match: '(\|)\s*\b(\w+)\b\('
      captures:
        1: keyword.operator.tera
        2: entity.name.function.tera
      push:
        - match: '\)'
          pop: true
        - include: arguments
    - match: '(\|)\s*\b(\w+)\b'
      captures:
        1: keyword.operator.tera
        2: entity.name.function.tera

  function:
    - match: '\b(?:(\w+)::)?(\w+)\s*\('
      captures:
        1: entity.name.namespace.tera
        2: entity.name.function.tera
      push:
        - match: '\)'
          pop: true
        - include: arguments

  boolean:
    - match: '\b[Tt]rue|[Ff]alse\b'
      scope: constant.language.boolean.tera

  number:
    - match: '[+-]?[0-9]+(\.[0-9]+)?'
      scope: constant.numeric.tera

  expression:
    - include: test
    - match: '(\+|\-|\*|/|%|~)'
      scope: keyword.operator.arithmetic.tera
    - include: filter
    - match: '\b(loop|__tera_context)\b'
      scope: variable.language.tera
    - include: function
    
    - match: '(\.)([a-zA-Z_][a-zA-Z0-9_]*)'
      captures:
        1: punctuation.accessor.tera
        2: variable.other.member    

    - match: '\[([a-zA-Z_][a-zA-Z0-9_]*)\]'
      captures:
        1: variable.other.tera
    
    - match: '\['
      captures:
        0: punctuation.section.brackets.begin.tera
      push:
        - match: '\]'
          captures:
            0: punctuation.section.brackets.end.tera
          pop: true
        - include: expression
    
    - match: '\('
      captures:
        0: punctuation.section.parens.begin.tera
      push:
        - match: '\)'
          captures:
            0: punctuation.section.parens.end.tera
          pop: true
        - include: expression
    
    - match: '(\.|,|::)'
      scope: punctuation.separator.tera
    - match: '(==|>=|<=|<|>|!=)'
      scope: keyword.operator.comparison.tera
    - match: '='
      scope: keyword.operator.assignment.tera
    - match: '\b(in|and|or|not|is|as)\b'
      scope: keyword.operator.word.tera
    
    - include: number
    - include: boolean
    - include: identifier
    
    - match: '"'
      captures:
        0: punctuation.definition.string.begin.tera
      push:
        - meta_scope: string.quoted.double.tera
        - match: '"'
          captures:
            0: punctuation.definition.string.end.tera
          pop: true
        - include: string
    - match: "'"
      captures:
        0: punctuation.definition.string.begin.tera
      push:
        - meta_scope: string.quoted.single.tera
        - match: "'"
          captures:
            0: punctuation.definition.string.end.tera
          pop: true
        - include: string
    - match: '`'
      captures:
        0: punctuation.definition.string.begin.tera
      push:
        - meta_scope: string.quoted.other.tera
        - match: '`'
          captures:
            0: punctuation.definition.string.end.tera
          pop: true
        - include: string

  arguments:
    - match: '\b(\w+)\s*=\s*'
      captures:
        1: variable.parameter.tera
    - include: expression

  string:
    - match: '\\.'
      scope: constant.character.escape.tera
